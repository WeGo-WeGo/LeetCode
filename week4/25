/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        // 建立虛擬節點，方便處理 head 交換
        ListNode dummy(0);
        dummy.next = head;

        ListNode* prevGroupEnd = &dummy;

        while (true) {
            // 確認是否還有 k 個節點可反轉
            ListNode* kth = prevGroupEnd;
            for (int i = 0; i < k && kth; ++i) {
                kth = kth->next;
            }
            if (!kth) break; // 不足 k 個，不再反轉

            // 紀錄下一組開頭
            ListNode* groupNext = kth->next;

            // 反轉區間：從 groupStart 到 kth
            ListNode* prev = groupNext;
            ListNode* curr = prevGroupEnd->next;
            while (curr != groupNext) {
                ListNode* temp = curr->next;
                curr->next = prev;
                prev = curr;
                curr = temp;
            }

            // 調整前後指標接上反轉後的區段
            ListNode* temp = prevGroupEnd->next;
            prevGroupEnd->next = kth;
            prevGroupEnd = temp;
        }

        return dummy.next;
    }
};
