class Solution {
public:
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        vector<vector<int>> tree(n);  // 鄰接表
        for (auto& edge : edges) {
            tree[edge[0]].push_back(edge[1]);
            tree[edge[1]].push_back(edge[0]);
        }

        vector<int> res(n, 0);    // 最終答案
        vector<int> count(n, 1);  // 每個節點子樹節點數量（包含自己）

        dfs(0, -1, tree, count, res);        // 第一次遍歷
        dfs2(0, -1, tree, count, res, n);    // 第二次遍歷

        return res;
    }

private:
    void dfs(int node, int parent, vector<vector<int>>& tree, vector<int>& count, vector<int>& res) {
        for (int child : tree[node]) {
            if (child == parent) continue;
            dfs(child, node, tree, count, res);
            count[node] += count[child];
            res[node] += res[child] + count[child];
        }
    }

    void dfs2(int node, int parent, vector<vector<int>>& tree, vector<int>& count, vector<int>& res, int n) {
        for (int child : tree[node]) {
            if (child == parent) continue;
            // 用 parent 的結果推算 child 的結果
            res[child] = res[node] - count[child] + (n - count[child]);
            dfs2(child, node, tree, count, res, n);
        }
    }
};
