class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        if (n == 0) return 0;

        vector<int> leftMax(n, 0); // 第 i 個位置左邊最大高度
        vector<int> rightMax(n, 0); // 第 i 個位置右邊最大高度

        // 計算左邊最大高度
        leftMax[0] = height[0];
        for (int i = 1; i < n; i++) {
            leftMax[i] = max(leftMax[i - 1], height[i]);
        }

        // 計算右邊最大高度
        rightMax[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rightMax[i] = max(rightMax[i + 1], height[i]);
        }

        // 計算每個柱子可以接到的水量
        int totalWater = 0;
        for (int i = 0; i < n; i++) {
            int waterLevel = min(leftMax[i], rightMax[i]); // 目前水位高度
            totalWater += max(0, waterLevel - height[i]); // 避免負數
        }

        return totalWater; // 回傳總蓄水量
    }
};
