class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int left = 1; //每小時最少吃一支
        int right = *max_element(piles.begin(), piles.end()); //最多每小時吃最大堆
        while(left < right){
            int mid = left + (right - left) / 2; //等於left+right/2只是避免overflow
            int totalHours = 0;

            for(int i = 0; i < piles.size(); i++){
                totalHours += (piles[i] + mid - 1) / mid; //無條件進位
            }

            if(totalHours <= h){
                right = mid; //如果總小時數小於等於 h，代表這個速度是可以的，嘗試更小的速度
            }
            else{
                left = mid + 1; // 否則速度太慢了，要加快
            }
        }
        return left; // 最後 left 就是符合條件的最小速度
    }
};
