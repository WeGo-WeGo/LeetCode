class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        mergeSort(nums, 0, nums.size() - 1);
        return nums;
    }

    // 合併排序主函式
    void mergeSort(vector<int>& nums, int left, int right) {
        if (left >= right) return; // 單個元素，不需排序

        int mid = left + (right - left) / 2;

        // 分成左右兩半遞迴排序
        mergeSort(nums, left, mid);
        mergeSort(nums, mid + 1, right);

        // 合併兩邊
        merge(nums, left, mid, right);
    }

    // 合併兩個已排序的子陣列 [left..mid] 和 [mid+1..right]
    void merge(vector<int>& nums, int left, int mid, int right) {
        vector<int> temp; // 暫存合併結果
        int i = left, j = mid + 1;

        // 將兩段有序陣列進行合併
        while (i <= mid && j <= right) {
            if (nums[i] <= nums[j]) {
                temp.push_back(nums[i++]);
            } else {
                temp.push_back(nums[j++]);
            }
        }

        // 將剩下的元素加入
        while (i <= mid) temp.push_back(nums[i++]);
        while (j <= right) temp.push_back(nums[j++]);

        // 將結果寫回原陣列
        for (int k = 0; k < temp.size(); ++k) {
            nums[left + k] = temp[k];
        }
    }
};
