/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> inorderIndex; // 儲存中序位置的 map

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        // 建立 hash map: 值 -> index
        for (int i = 0; i < inorder.size(); ++i) {
            inorderIndex[inorder[i]] = i;
        }

        // 呼叫 helper 遞迴函式建構樹
        return build(preorder, 0, preorder.size() - 1,
                     inorder, 0, inorder.size() - 1);
    }

    TreeNode* build(const vector<int>& preorder, int preStart, int preEnd,
                    const vector<int>& inorder, int inStart, int inEnd) {
        // Base case: 範圍錯誤，代表沒有節點
        if (preStart > preEnd || inStart > inEnd) return nullptr;

        // 根節點是 preorder 的第一個元素
        int rootVal = preorder[preStart];
        TreeNode* root = new TreeNode(rootVal);

        // 找到根節點在 inorder 中的位置
        int inRootIndex = inorderIndex[rootVal];

        // 左子樹的大小 = 根在 inorder 中的位置 - inorder 的起點
        int leftSize = inRootIndex - inStart;

        // 遞迴構建左子樹
        root->left = build(preorder, preStart + 1, preStart + leftSize,
                           inorder, inStart, inRootIndex - 1);

        // 遞迴構建右子樹
        root->right = build(preorder, preStart + leftSize + 1, preEnd,
                            inorder, inRootIndex + 1, inEnd);

        return root;
    }
};
