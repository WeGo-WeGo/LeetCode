class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;    // 最終結果
        vector<int> path;           // 當前排列中的路徑
        vector<bool> used(nums.size(), false); // 紀錄哪些數字已使用
        backtrack(nums, path, used, res);
        return res;
    }

    void backtrack(const vector<int>& nums, vector<int>& path,
                   vector<bool>& used, vector<vector<int>>& res) {
        // 終止條件：排列長度等於 nums 大小
        if (path.size() == nums.size()) {
            res.push_back(path); // 加入一個完整排列
            return;
        }

        // 遍歷所有可選數字
        for (int i = 0; i < nums.size(); ++i) {
            if (used[i]) continue; // 已使用就跳過

            // 做選擇
            path.push_back(nums[i]);
            used[i] = true;

            // 遞迴下一層
            backtrack(nums, path, used, res);

            // 撤銷選擇（回溯）
            path.pop_back();
            used[i] = false;
        }
    }
};
