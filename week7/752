class Solution {
public:
   vector<string> getNextStates(string state){ //產生某個狀態之所有可能的下一步
    vector<string> nextStates;
    
    for(int i=0;i<4;i++){
        char digit = state[i];
        
        string up = state; //向上轉1
        up[i] = (digit == '9') ? '0' : digit+1;
        nextStates.push_back(up);
        
        string down = state;//向下轉-1
        char digit2 = state[i];
        down[i] = (digit2 == '0') ? '9' : digit2-1;
        nextStates.push_back(down);
    }
        return nextStates;
   }
   int openLock(vector<string>& deadends, string target){
        unordered_set<string> dead(deadends.begin(),deadends.end());
        unordered_set<string> visited;// 要快速查找 => hash table
        queue<pair<string, int>> q;//存取(狀態、步數)
    
        if (dead.count("0000")) return -1;
        
        q.push({"0000",0});
        visited.insert("0000");
    
        while(!q.empty()){
            auto[cur,steps] = q.front();
            q.pop();
        
            if( cur == target) return steps;
            for(string next:getNextStates(cur)){ //有8種可能for (int i = 0; i < vec.size(); ++i)
                
                if(!dead.count(next)&&!visited.count(next)){
                
                q.push({next,steps+1}); //合法者加入queue，等待位來處理
                
                visited.insert(next); 
            }
        }
    }
        return -1;
   }
};
